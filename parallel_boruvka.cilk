#include <iostream>
#include <sys/time.h>
#include <fstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <vector>
#include<stdlib.h>
#include <cilk.h>

using namespace std;

/*
 * A Generic and Highly Efficient Parallel Variant of Boruvka's Algorithm
 * http://ieeexplore.ieee.org/xpls/icp.jsp?arnumber=7092783&tag=1#search-basic
 */

void findMinEdgePerVertex(int *vertices, int *edges, int *weights, int *vertexMinEdge, int noOfVertices, int noOfEdges)
{
	cilk_for (int i = 0; i < noOfVertices; i++) {
		int j = vertices[i];
		int min_weight = weights[j];
		int min_edge = edges[j];
		while (j!=noOfEdges && j != noOfEdges - 1 && (j < vertices[i + 1] || i + 1 == noOfVertices)) {
			if (weights[j] < min_weight) {
				min_weight = weights[j];
				min_edge = edges[j];
			}
			j++;
		}
		vertexMinEdge[i] = min_edge;
	}
}

void removeMirroredEdges(int *vertices, int *edges, int *weights, int *vertexMinEdge, int vertexId, int noOfVertices, int noOfEdges) {
	int i;

	if (vertexId == vertexMinEdge[vertexMinEdge[vertexId]]) {
		vertexMinEdge[vertexId] = -1;
	}
}

void insert_new_edges(int *vertices, int *edges, int *weights, int *color, int *successor, int *newVertices, int *newEdges, int *newWeights, int *newEdgeSize, int noOfVertices, int noOfEdges)
{
	int i, j = 0, k = 0, l = 0;
	int count, iterator = 1, vertexIter = 0;
	int startEdgeIndex, endEdgeIndex;

	while (vertexIter < noOfVertices) {
		count = 0;
		while (successor[vertexIter] != 1) {
			vertexIter++;
		}

		if (vertexIter >= noOfVertices) {
			break;
		}

		for (i = 0; i < noOfVertices; i++) {
			if (color[vertexIter] == color[i]) {
				startEdgeIndex = vertices[i];
				endEdgeIndex = i + 1 < noOfVertices ? vertices[i + 1] - 1 : noOfEdges - 1;

				if (newVertices[l] == -1) {
					newVertices[l] = k;
				}
				for (j = startEdgeIndex; j <= endEdgeIndex; j++) {
					if (color[vertexIter] != color[edges[j]]) {
						newEdges[k] = edges[j];
						newWeights[k] = weights[j];
						k++;
					}
					
				}
			}
		}
		vertexIter++;
		l++;
	}
	*newEdgeSize = k > 0? k - 1 : 0;
}

void parseGraph(int **vertices, int **edges, int **weights, int *noOfVertices, int *noOfEdges)
{
	int x, value, junk, i;
	fstream f;

	f.open("ipfile", ios::in);
	f >> x;
	*noOfVertices = x;
	*vertices = (int *)malloc(x * sizeof(int));
	for (i = 0; i < x; i++) {
		f >> value >> junk;
		(*vertices)[i] = value;
	}

	f >> junk;
	f >> x;
	*noOfEdges = x;

	*edges = (int *)malloc(x * sizeof(int));
	*weights = (int *)malloc(x * sizeof(int));

	for (i=0; i<x; i++) {
		f >> value >>junk;
		(*edges)[i] = value;
		(*weights)[i] = junk;
	}
}

int cilk_main(int argc, char *argv[])
{
	int *vertices, *edges, *weights, noOfVertices, noOfEdges, i;
	parseGraph(&vertices, &edges, &weights, &noOfVertices, &noOfEdges);

	int countEdges = 0;
	int colorIndex = 0;
	int *vertexMinEdge = (int *)malloc(noOfVertices*sizeof(int));
	int *color = (int *)malloc(noOfVertices*sizeof(int));
	int *successor = (int *)malloc(noOfVertices*sizeof(int));
	int *flag = (int *)malloc(noOfVertices*sizeof(int));
	int *exclusivePrefixSum = (int *)malloc(noOfVertices*sizeof(int));
	int colorCount;

	struct timeval  tv1, tv2;
	gettimeofday(&tv1, NULL);

	for (i = 0; i < noOfVertices; i++) {
		color[i] = -1;
		successor[i] = 0;
	}

	while (noOfVertices > 1) {
		findMinEdgePerVertex(vertices, edges, weights, vertexMinEdge, noOfVertices, noOfEdges);

		for (i = 0; i < noOfVertices; i++) {

			removeMirroredEdges(vertices, edges, weights, vertexMinEdge, i, noOfVertices, noOfEdges);
		}


		for (i = 0; i < noOfVertices; i++) {
			if (vertexMinEdge[i] != -1 && i < noOfVertices) {
				// printf("MST edge: %d - %d\n", i, vertexMinEdge[i]);
				countEdges++;
			}
		}

		colorCount = 0;
		for (i = 0; i < noOfVertices; i++) {
			if (vertexMinEdge[i] != -1) {
				if (color[i] == -1) {
					if (color[vertexMinEdge[i]] == -1) {
						successor[vertexMinEdge[i]] = 1;
						color[vertexMinEdge[i]] = colorIndex;
						colorIndex++;
						colorCount++;
					}
					color[i] = color[vertexMinEdge[i]];
				}
			}
		}

		exclusivePrefixSum[0] = 0;
		for (i = 1; i < noOfVertices; i++) {
			exclusivePrefixSum[i] = exclusivePrefixSum[i - 1] + successor[i - 1];
		}
		int *newVertices = (int *)malloc(colorCount*sizeof(int));
		int *newEdges = (int *)malloc(noOfEdges*sizeof(int));
		int *newWeights = (int *)malloc(noOfEdges*sizeof(int));

		int newVerticesSize = colorCount;
		int newEdgeSize;

		if (newVerticesSize <= 1) {
			break;
		}

		for (i = 0; i < newVerticesSize; i++) {
			newVertices[i] = -1;
		}


		insert_new_edges(vertices, edges, weights, color, successor, newVertices, newEdges, newWeights, &newEdgeSize, noOfVertices, noOfEdges);

		//newEdges = (int *)malloc(newEdgeSize* sizeof(int));
		//newWeights = (int *)malloc(newEdgeSize * sizeof(int));
		memcpy(vertices, newVertices, newVerticesSize* sizeof(int));
		memcpy(edges, newEdges, newEdgeSize* sizeof(int));
		memcpy(weights, newWeights, newEdgeSize* sizeof(int));
		noOfVertices = newVerticesSize;
		noOfEdges = newEdgeSize;
		free(newVertices);
		free(newEdges);
		free(newWeights);
	}
	cout<<"Total number of edges in this MST = "<<countEdges<<endl;
	//cout<<"Total number of vertices in this MST = "<<noOfVertices;
	gettimeofday(&tv2, NULL);
	cout<<"Total Execution time = "<<(double)(tv2.tv_usec - tv1.tv_usec) / 1000000 + (double)(tv2.tv_sec - tv1.tv_sec)<<" seconds"<<endl;

	free(exclusivePrefixSum);
	free(flag);
	free(successor);
	free(color);
	free(vertexMinEdge);

	free(vertices);
	free(edges);
	free(weights);
}



